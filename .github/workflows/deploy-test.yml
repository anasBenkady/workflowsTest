name: Publish Packages to Verdaccio

on:
  push:
    branches:
      - development

jobs:
  find_packages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      dependencies: ${{ steps.set-matrix.outputs.dependencies }}
    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install jq

      - id: set-matrix
        run: |
              echo "Finding package.json files..."
              # Find all package.json files, excluding those in node_modules directories
              PACKAGES=$(find . -name 'package.json' -not -path '*/node_modules/*')

              echo "Found package.json files:"
              echo "$PACKAGES"

              # Start JSON object
              JSON_OBJECT="{}"
              declare -A PACKAGE_MAP

              # First, build a map of name to directory
              for PACKAGE_PATH in $PACKAGES
              do
                  # Trim the '/package.json' part from the path to use as the JSON key
                  PACKAGE_DIR="${PACKAGE_PATH%'/package.json'}"

                  # Read the 'name' attribute from package.json
                  if [ -f "$PACKAGE_PATH" ]; then
                      PACKAGE_NAME=$(jq -r '.name' "$PACKAGE_PATH")
                      PACKAGE_MAP[$PACKAGE_NAME]="$PACKAGE_DIR"
                  fi
              done

              # Now, iterate again to find dependencies that match names in the map
              for PACKAGE_PATH in $PACKAGES
              do
                  PACKAGE_DIR="${PACKAGE_PATH%'/package.json'}"

                  # Initialize empty list of matched dependencies
                  MATCHED_DEPS=()

                  # Read dependencies and devDependencies from package.json
                  if [ -f "$PACKAGE_PATH" ]; then
                      DEPENDENCIES=$(jq -r '.dependencies, .devDependencies | keys[]?' "$PACKAGE_PATH")
                      
                      # Check each dependency to see if it's in our map
                      for DEP in $DEPENDENCIES
                      do
                          if [[ -n "${PACKAGE_MAP[$DEP]}" ]]; then
                              # Add the directory path corresponding to the dependency
                              MATCHED_DEPS+=("\"${PACKAGE_MAP[$DEP]}\"")
                          fi
                      done

                      # Convert matched dependencies to a JSON array
                      if [ ${#MATCHED_DEPS[@]} -gt 0 ]; then
                          DEPS_JSON=$(printf '%s\n' "${MATCHED_DEPS[@]}" | jq -s '.')
                          JSON_OBJECT=$(echo "$JSON_OBJECT" | jq --arg path "$PACKAGE_DIR" --argjson deps "$DEPS_JSON" '. + {($path): $deps}')
                      else
                          JSON_OBJECT=$(echo "$JSON_OBJECT" | jq --arg path "$PACKAGE_DIR" '. + {($path): []}')
                      fi
                  fi
              done
              echo "Package dependencies map: $JSON_OBJECT"

              PATH_NEEDS=$(echo $JSON_OBJECT | jq -c '[to_entries[] | {key: .key, needs: .value}]')
              echo "dependencies = $PATH_NEEDS"
              echo "dependencies=$PATH_NEEDS" >> $GITHUB_OUTPUT

              MATRIX_JSON=$(echo $JSON_OBJECT | jq 'keys | join(", ")')
              echo "matrix = [$MATRIX_JSON]"
              echo "matrix=[$MATRIX_JSON]" >> $GITHUB_OUTPUT

        shell: bash
  
  build:
    needs: find_packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.find_packages.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Test
        run: |
          echo "Building and testing ${{ matrix.include }} :  ${{ fromJson(needs.find_packages.outputs.dependencies) }}"
        # Add your actual build and test commands here

    # Define dependencies dynamically using the needs field
    #needs: ${{fromJson(matrix.needs)}}