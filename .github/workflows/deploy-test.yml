name: Publish Packages to Verdaccio

on:
  push:
    branches:
      - development

jobs:
  find_packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.dependencies-step.outputs.package }}
      dependencies-map: ${{ steps.dependencies-step.outputs.dependencies-map }}
    steps:
      - uses: actions/checkout@v3

      - id: dependencies-step
        name: Finding packages and their dependencies in shared libraries
        run: |
            echo "Finding package.json files..."
            # Find all package.json files, excluding those in node_modules directories
            PACKAGES=$(find . -name 'package.json' -not -path '*/node_modules/*')

            PACKAGES_JSON=$(echo "$PACKAGES" | sed 's#/package.json##' | jq -R -s -c 'split("\n")[:-1]')
            echo "Found packages = $PACKAGES_JSON"
            echo "package=$PACKAGES_JSON" >> $GITHUB_OUTPUT

            PACKAGE_NAMES=()
            PACKAGE_PATHS_MAP="{}"

            # Iterate over each package.json file
            for PACKAGE in $PACKAGES; do
                # Extract the name field from the package.json file
                if [ -f "$PACKAGE" ]; then
                    NAME=$(jq -r '.name' "$PACKAGE" | tr -d '\n' | tr -d '\r')
                    if [ "$NAME" != "null" ]; then
                        PACKAGE_NAME=$(jq -r '.name' "$PACKAGE")
                        PACKAGE_NAMES+=("$PACKAGE_NAME")
                        PACKAGE_PATH=$(echo $PACKAGE | sed 's|/package.json||')
                        PACKAGE_PATHS_MAP=$(echo $PACKAGE_PATHS_MAP | jq --arg name "$PACKAGE_NAME" --arg path "$PACKAGE_PATH" '. + {($name): $path}')
                    fi
                fi
            done

            # Convert the array of package names to a JSON array
            PACKAGE_NAMES_JSON=$(printf '%s\n' "${PACKAGE_NAMES[@]}" | jq -R -s -c 'split("\n")[:-1]')

            # New code to iterate over the package.json files and extract dependencies
            DEPENDENCIES_MAP="{"
            for PACKAGE in $PACKAGES; do
                if [ -f "$PACKAGE" ]; then
                    # Filter and collect dependencies that are in the PACKAGE_NAMES_JSON
                    FILTERED_DEPS=$(jq -r --argjson packageNames "$PACKAGE_NAMES_JSON" --argjson pathsMap "$PACKAGE_PATHS_MAP" \
                        '.dependencies | to_entries | map(select(.key as $k | $packageNames | index($k))) | map($pathsMap[.key] // "") | map(select(. != "")) | map("\"" + . + "\"") | join(",")' "$PACKAGE")
                    
                    # Format the output to match the required structure
                    if [[ $FILTERED_DEPS != "" ]]; then
                        DEPENDENCIES_MAP+="\"$(echo $PACKAGE | sed 's|/package.json||')\":[$FILTERED_DEPS],"
                    else
                        DEPENDENCIES_MAP+="\"$(echo $PACKAGE | sed 's|/package.json||')\":[],"
                    fi
                fi
            done
            # Remove the trailing comma to ensure valid JSON format
            DEPENDENCIES_MAP=${DEPENDENCIES_MAP%,}
            DEPENDENCIES_MAP+="}"

            echo "dependencies map = $DEPENDENCIES_MAP"
            echo "dependencies-map=$DEPENDENCIES_MAP" >> $GITHUB_OUTPUT
        shell: bash

  order_packages:
    needs: find_packages
    runs-on: ubuntu-latest
    environment: Dev
    #env:
      #PACKAGES: ${{ needs.find_packages.outputs.packages }}
      #DEPENDENCIES_MAP: ${{ needs.find_packages.outputs.dependencies-map }}
    outputs:
        ordered-packages: ${{ steps.order-packages-step.outputs.ordered-packages }}
    steps:
      - uses: actions/checkout@v3

      - id: ordered-packages
        name: Ordering the packages array
        run: | 
          PACKAGES=("./RabitMqClient" "./CommonMessages" "./Logger")
          declare -A DEPENDENCIES_MAP=(
              ["./RabitMqClient"]=("./Logger" "./CommonMessages")
              ["./CommonMessages"]=("./Logger")
              ["./Logger"]=()
          )
          # Topological sort function
          function tsort() {
              local -n nodes=$1
              local -n edges=$2
              local -A visited
              local -A mark
              local -a sorted

              # Helper function for depth-first search
              function visit() {
                  local node=$1
                  if [[ ${mark[$node]} -eq 1 ]]; then
                      echo "Cycle detected, sorting not possible"
                      exit 1
                  fi
                  if [[ -z ${visited[$node]} ]]; then
                      mark[$node]=1
                      for dep in ${edges[$node]+"${edges[$node]}"}; do
                          visit $dep
                      done
                      mark[$node]=0
                      visited[$node]=1
                      sorted=("$node" "${sorted[@]}")
                  fi
              }

              for node in "${nodes[@]}"; do
                  if [[ -z ${visited[$node]} ]]; then
                      visit $node
                  fi
              done
              echo ${sorted[@]}
          }

          # Call tsort and pass the package names and their dependencies
          sorted_packages=$(tsort PACKAGES DEPENDENCIES_MAP)
          echo "Sorted packages:"
          echo $sorted_packages

          # The output will provide the order to process the packages
          # For publishing or any further action, iterate over `sorted_packages`
          for pkg in $sorted_packages; do
              echo "Processing $pkg..."
              # Add the command to navigate to the package directory and execute the desired action, e.g., npm publish
              # cd $pkg
              # npm publish --registry http://your-verdaccio-server:4873
              # cd -
          done
      
